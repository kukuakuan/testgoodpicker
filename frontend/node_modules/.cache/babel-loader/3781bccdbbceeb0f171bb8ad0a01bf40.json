{"ast":null,"code":"class WebSocketService {\n  static getInstance() {\n    if (!WebSocketService.instance) {\n      WebSocketService.instance = new WebSocketService();\n    }\n\n    return WebSocketService.instance;\n  }\n\n  constructor() {\n    this.callbacks = {};\n    this.socketRef = null;\n  }\n\n  connect(chatUrl) {\n    const path = `ws://127.0.0.1:8000/ws/chat/${chatUrl}/`;\n    this.socketRef = new WebSocket(path);\n\n    this.socketRef.onopen = () => {\n      console.log('WebSocket open');\n    };\n\n    this.socketRef.onmessage = e => {\n      this.socketNewMessage(e.data);\n    };\n\n    this.socketRef.onerror = e => {\n      console.log(e.message);\n    };\n\n    this.socketRef.onclose = () => {\n      console.log('WebSocket closed');\n    };\n  }\n\n  disconnect() {\n    if (this.socketRef) {\n      this.socketRef.close();\n    }\n  }\n\n  socketNewMessage(data) {\n    const parsedData = JSON.parse(data);\n    const command = parsedData.command;\n\n    if (Object.keys(this.callbacks).length === 0) {\n      return;\n    }\n\n    if (command === 'new_message') {\n      this.callbacks[command](parsedData.message);\n    }\n  }\n\n  newChatMessage(_ref) {\n    let {\n      from,\n      content,\n      chatId\n    } = _ref;\n    this.sendMessage({\n      command: 'new_message',\n      from,\n      message: content,\n      chatId\n    });\n  }\n\n  addCallbacks(newMessageCallback) {\n    this.callbacks['new_message'] = newMessageCallback;\n  }\n\n  sendMessage(data) {\n    try {\n      this.socketRef.send(JSON.stringify({ ...data\n      }));\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  state() {\n    return this.socketRef.readyState;\n  }\n\n}\n\nWebSocketService.instance = null;\nconst WebSocketInstance = WebSocketService.getInstance();\nexport default WebSocketInstance;","map":{"version":3,"sources":["/home/quan/Downloads/g/goodpicker-main/frontend/src/service/websocket.js"],"names":["WebSocketService","getInstance","instance","constructor","callbacks","socketRef","connect","chatUrl","path","WebSocket","onopen","console","log","onmessage","e","socketNewMessage","data","onerror","message","onclose","disconnect","close","parsedData","JSON","parse","command","Object","keys","length","newChatMessage","from","content","chatId","sendMessage","addCallbacks","newMessageCallback","send","stringify","err","state","readyState","WebSocketInstance"],"mappings":"AAAA,MAAMA,gBAAN,CAAuB;AAIJ,SAAXC,WAAW,GAAG;AACpB,QAAI,CAACD,gBAAgB,CAACE,QAAtB,EAAgC;AAC/BF,MAAAA,gBAAgB,CAACE,QAAjB,GAA4B,IAAIF,gBAAJ,EAA5B;AACA;;AACD,WAAOA,gBAAgB,CAACE,QAAxB;AACA;;AAEDC,EAAAA,WAAW,GAAG;AAAA,SATdC,SASc,GATF,EASE;AACb,SAAKC,SAAL,GAAiB,IAAjB;AACA;;AAEDC,EAAAA,OAAO,CAACC,OAAD,EAAU;AAChB,UAAMC,IAAI,GAAI,+BAA8BD,OAAQ,GAApD;AACA,SAAKF,SAAL,GAAiB,IAAII,SAAJ,CAAcD,IAAd,CAAjB;;AAEA,SAAKH,SAAL,CAAeK,MAAf,GAAwB,MAAM;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,KAFD;;AAIA,SAAKP,SAAL,CAAeQ,SAAf,GAA2BC,CAAC,IAAI;AAC/B,WAAKC,gBAAL,CAAsBD,CAAC,CAACE,IAAxB;AACA,KAFD;;AAIA,SAAKX,SAAL,CAAeY,OAAf,GAAyBH,CAAC,IAAI;AAC7BH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAC,CAACI,OAAd;AACA,KAFD;;AAIA,SAAKb,SAAL,CAAec,OAAf,GAAyB,MAAM;AAC9BR,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,KAFD;AAGA;;AAEDQ,EAAAA,UAAU,GAAG;AACZ,QAAI,KAAKf,SAAT,EAAoB;AACnB,WAAKA,SAAL,CAAegB,KAAf;AACA;AACD;;AAEDN,EAAAA,gBAAgB,CAACC,IAAD,EAAO;AACtB,UAAMM,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAX,CAAnB;AACA,UAAMS,OAAO,GAAGH,UAAU,CAACG,OAA3B;;AACA,QAAIC,MAAM,CAACC,IAAP,CAAY,KAAKvB,SAAjB,EAA4BwB,MAA5B,KAAuC,CAA3C,EAA8C;AAC7C;AACA;;AACD,QAAIH,OAAO,KAAK,aAAhB,EAA+B;AAC9B,WAAKrB,SAAL,CAAeqB,OAAf,EAAwBH,UAAU,CAACJ,OAAnC;AACA;AACD;;AAEDW,EAAAA,cAAc,OAA4B;AAAA,QAA3B;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,KAA2B;AACzC,SAAKC,WAAL,CAAiB;AAChBR,MAAAA,OAAO,EAAE,aADO;AAEhBK,MAAAA,IAFgB;AAGhBZ,MAAAA,OAAO,EAAEa,OAHO;AAIhBC,MAAAA;AAJgB,KAAjB;AAMA;;AAEDE,EAAAA,YAAY,CAACC,kBAAD,EAAqB;AAChC,SAAK/B,SAAL,CAAe,aAAf,IAAgC+B,kBAAhC;AACA;;AAEDF,EAAAA,WAAW,CAACjB,IAAD,EAAO;AACjB,QAAI;AACH,WAAKX,SAAL,CAAe+B,IAAf,CAAoBb,IAAI,CAACc,SAAL,CAAe,EAAE,GAAGrB;AAAL,OAAf,CAApB;AACA,KAFD,CAEE,OAAOsB,GAAP,EAAY;AACb3B,MAAAA,OAAO,CAACC,GAAR,CAAY0B,GAAG,CAACpB,OAAhB;AACA;AACD;;AAEDqB,EAAAA,KAAK,GAAG;AACP,WAAO,KAAKlC,SAAL,CAAemC,UAAtB;AACA;;AA5EqB;;AAAjBxC,gB,CACEE,Q,GAAW,I;AA8EnB,MAAMuC,iBAAiB,GAAGzC,gBAAgB,CAACC,WAAjB,EAA1B;AAEA,eAAewC,iBAAf","sourcesContent":["class WebSocketService {\n\tstatic instance = null\n\tcallbacks = {}\n\n\tstatic getInstance() {\n\t\tif (!WebSocketService.instance) {\n\t\t\tWebSocketService.instance = new WebSocketService()\n\t\t}\n\t\treturn WebSocketService.instance\n\t}\n\n\tconstructor() {\n\t\tthis.socketRef = null\n\t}\n\n\tconnect(chatUrl) {\n\t\tconst path = `ws://127.0.0.1:8000/ws/chat/${chatUrl}/`\n\t\tthis.socketRef = new WebSocket(path)\n\n\t\tthis.socketRef.onopen = () => {\n\t\t\tconsole.log('WebSocket open')\n\t\t}\n\n\t\tthis.socketRef.onmessage = e => {\n\t\t\tthis.socketNewMessage(e.data)\n\t\t}\n\n\t\tthis.socketRef.onerror = e => {\n\t\t\tconsole.log(e.message)\n\t\t}\n\n\t\tthis.socketRef.onclose = () => {\n\t\t\tconsole.log('WebSocket closed')\n\t\t}\n\t}\n\n\tdisconnect() {\n\t\tif (this.socketRef) {\n\t\t\tthis.socketRef.close()\n\t\t}\n\t}\n\n\tsocketNewMessage(data) {\n\t\tconst parsedData = JSON.parse(data)\n\t\tconst command = parsedData.command\n\t\tif (Object.keys(this.callbacks).length === 0) {\n\t\t\treturn\n\t\t}\n\t\tif (command === 'new_message') {\n\t\t\tthis.callbacks[command](parsedData.message)\n\t\t}\n\t}\n\n\tnewChatMessage({ from, content, chatId }) {\n\t\tthis.sendMessage({\n\t\t\tcommand: 'new_message',\n\t\t\tfrom,\n\t\t\tmessage: content,\n\t\t\tchatId\n\t\t})\n\t}\n\n\taddCallbacks(newMessageCallback) {\n\t\tthis.callbacks['new_message'] = newMessageCallback\n\t}\n\n\tsendMessage(data) {\n\t\ttry {\n\t\t\tthis.socketRef.send(JSON.stringify({ ...data }))\n\t\t} catch (err) {\n\t\t\tconsole.log(err.message)\n\t\t}\n\t}\n\n\tstate() {\n\t\treturn this.socketRef.readyState\n\t}\n}\n\nconst WebSocketInstance = WebSocketService.getInstance()\n\nexport default WebSocketInstance\n"]},"metadata":{},"sourceType":"module"}