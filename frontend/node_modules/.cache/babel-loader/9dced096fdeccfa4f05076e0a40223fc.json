{"ast":null,"code":"var _jsxFileName = \"/home/quan/Downloads/g/goodpicker-main/frontend/src/components/elements/input/index.js\";\nimport './style.scss';\nimport { Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport Password from 'antd/lib/input/Password';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CustomInput = props => {\n  const {\n    name,\n    classNames,\n    style,\n    formatter,\n    type,\n    placeholder,\n    rules,\n    addonAfter,\n    addonBefore,\n    allowClear,\n    bordered,\n    defaultValue,\n    disabled,\n    id,\n    maxLength,\n    prefix,\n    size,\n    suffix,\n    value,\n    onChange,\n    onPressEnter,\n    children,\n    parser,\n    customStyle\n  } = props;\n  let overrideClassNames = [];\n\n  const initArgs = () => {\n    if (customStyle === 'style#1') {\n      overrideClassNames.push('ant-input-custom-style-1');\n    }\n\n    if (customStyle === 'style#2') {\n      overrideClassNames.push('ant-input-custom-style-2');\n    }\n\n    if (classNames.length > 0) {\n      overrideClassNames = overrideClassNames.concat(classNames);\n    }\n  };\n\n  initArgs();\n\n  const renderComp = () => {\n    if (type === 'password') {\n      return /*#__PURE__*/_jsxDEV(Password, {\n        name: name,\n        className: overrideClassNames.join(' '),\n        style: style,\n        formatter: formatter,\n        type: type,\n        placeholder: placeholder,\n        rules: rules,\n        addonAfter: addonAfter,\n        addonBefore: addonBefore,\n        allowClear: allowClear,\n        bordered: bordered,\n        defaultValue: defaultValue,\n        disabled: disabled,\n        id: id,\n        maxLength: maxLength,\n        prefix: prefix,\n        size: size,\n        suffix: suffix,\n        value: value,\n        onChange: onChange,\n        onPressEnter: onPressEnter,\n        parser: parser,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Input, {\n        name: name,\n        className: overrideClassNames.join(' '),\n        style: style,\n        formatter: formatter,\n        type: type,\n        placeholder: placeholder,\n        rules: rules,\n        addonAfter: addonAfter,\n        addonBefore: addonBefore,\n        allowClear: allowClear,\n        bordered: bordered,\n        defaultValue: defaultValue,\n        disabled: disabled,\n        id: id,\n        maxLength: maxLength,\n        prefix: prefix,\n        size: size,\n        suffix: suffix,\n        value: value,\n        onChange: onChange,\n        onPressEnter: onPressEnter,\n        parser: parser,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  return renderComp();\n};\n\n_c = CustomInput;\nCustomInput.propTypes = {\n  name: PropTypes.string,\n  children: PropTypes.any,\n  formatter: PropTypes.any,\n  classNames: PropTypes.array,\n  style: PropTypes.any,\n  type: PropTypes.string,\n  placeholder: PropTypes.string,\n  rules: PropTypes.array,\n  addonAfter: PropTypes.node,\n  addonBefore: PropTypes.node,\n  allowClear: PropTypes.bool,\n  bordered: PropTypes.bool,\n  defaultValue: PropTypes.any,\n  disabled: PropTypes.bool,\n  id: PropTypes.string,\n  maxLength: PropTypes.number,\n  prefix: PropTypes.node,\n  size: PropTypes.string,\n  suffix: PropTypes.node,\n  value: PropTypes.any,\n  onChange: PropTypes.func,\n  onPressEnter: PropTypes.func,\n  parser: PropTypes.func,\n  customStyle: PropTypes.any\n};\nCustomInput.defaultProps = {\n  classNames: [],\n  customStyle: 'style#1'\n};\nexport default CustomInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomInput\");","map":{"version":3,"sources":["/home/quan/Downloads/g/goodpicker-main/frontend/src/components/elements/input/index.js"],"names":["Input","PropTypes","Password","CustomInput","props","name","classNames","style","formatter","type","placeholder","rules","addonAfter","addonBefore","allowClear","bordered","defaultValue","disabled","id","maxLength","prefix","size","suffix","value","onChange","onPressEnter","children","parser","customStyle","overrideClassNames","initArgs","push","length","concat","renderComp","join","propTypes","string","any","array","node","bool","number","func","defaultProps"],"mappings":"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","sourcesContent":["import './style.scss';\n\nimport { Input } from 'antd';\nimport PropTypes from 'prop-types'; \n\nimport Password from 'antd/lib/input/Password';\n\nconst CustomInput = (props) => {\n\n    const { \n        name,\n        classNames,\n        style,\n        formatter,\n        type,\n        placeholder,\n        rules,\n        addonAfter,\n        addonBefore,\n        allowClear,\n        bordered,\n        defaultValue,\n        disabled,\n        id,\n        maxLength,\n        prefix,\n        size,\n        suffix,\n        value,\n        onChange,\n        onPressEnter,\n        children,\n        parser,\n        customStyle\n    } = props;\n\n    let overrideClassNames = []\n\n    const initArgs = () => {\n\n        if (customStyle === 'style#1') {\n            overrideClassNames.push('ant-input-custom-style-1')\n        }\n\n        if (customStyle === 'style#2') {\n            overrideClassNames.push('ant-input-custom-style-2')\n        }\n\n        if (classNames.length > 0) {\n            overrideClassNames = overrideClassNames.concat(classNames)\n        } \n    }\n\n    initArgs();\n\n    const renderComp = () => {\n        if (type === 'password') {\n            return (\n                <Password \n                    name={ name }\n                    className={ overrideClassNames.join(' ') }\n                    style={ style }\n                    formatter={ formatter }\n                    type={ type }\n                    placeholder={ placeholder }\n                    rules={ rules }\n                    addonAfter={ addonAfter }\n                    addonBefore={ addonBefore }\n                    allowClear={ allowClear }\n                    bordered={ bordered }\n                    defaultValue={ defaultValue }\n                    disabled={ disabled }\n                    id={ id }\n                    maxLength={ maxLength }\n                    prefix={ prefix }\n                    size={ size }\n                    suffix={ suffix }\n                    value={ value }\n                    onChange={ onChange }\n                    onPressEnter={ onPressEnter }\n                    parser={ parser }>\n                    { children }\n                </Password>\n            )\n        } else {\n            return (\n                <Input \n                    name={ name }\n                    className={ overrideClassNames.join(' ') }\n                    style={ style }\n                    formatter={ formatter }\n                    type={ type }\n                    placeholder={ placeholder }\n                    rules={ rules }\n                    addonAfter={ addonAfter }\n                    addonBefore={ addonBefore }\n                    allowClear={ allowClear }\n                    bordered={ bordered }\n                    defaultValue={ defaultValue }\n                    disabled={ disabled }\n                    id={ id }\n                    maxLength={ maxLength }\n                    prefix={ prefix }\n                    size={ size }\n                    suffix={ suffix }\n                    value={ value }\n                    onChange={ onChange }\n                    onPressEnter={ onPressEnter }\n                    parser={ parser }>\n                    { children }\n                </Input>\n            )\n        }\n    }\n\n    return renderComp();\n}\n\nCustomInput.propTypes = {\n    name: PropTypes.string,\n    children: PropTypes.any,\n    formatter: PropTypes.any,\n    classNames: PropTypes.array,\n    style: PropTypes.any,\n    type: PropTypes.string,\n    placeholder: PropTypes.string,\n    rules: PropTypes.array,\n    addonAfter: PropTypes.node,\n    addonBefore: PropTypes.node,\n    allowClear: PropTypes.bool,\n    bordered: PropTypes.bool,\n    defaultValue: PropTypes.any,\n    disabled: PropTypes.bool,\n    id: PropTypes.string,\n    maxLength: PropTypes.number,\n    prefix: PropTypes.node,\n    size: PropTypes.string,\n    suffix: PropTypes.node,\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    onPressEnter: PropTypes.func,\n    parser: PropTypes.func,\n    customStyle: PropTypes.any \n}\n\nCustomInput.defaultProps = {\n    classNames: [],\n\n    customStyle: 'style#1'\n}\n\nexport default CustomInput;\n"]},"metadata":{},"sourceType":"module"}