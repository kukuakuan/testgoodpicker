{"ast":null,"code":"// Fallback locale.\n// (when not a single one of the supplied \"preferred\" locales is available)\nvar defaultLocale = 'en'; // For all locales added\n// their relative time formatter messages will be stored here.\n\nvar localesData = {}; // According to the spec BCP 47 language tags are case-insensitive.\n// https://tools.ietf.org/html/rfc5646\n\nvar lowercaseLocaleLookup = {};\nexport function getDefaultLocale() {\n  return defaultLocale;\n}\nexport function setDefaultLocale(locale) {\n  defaultLocale = locale;\n}\n/**\r\n * Gets locale data previously added by `addLocaleData()`.\r\n * @return  {object} [localeData]\r\n */\n\nexport function getLocaleData(locale) {\n  return localesData[locale];\n}\n/**\r\n * Adds locale data.\r\n * Is called by `RelativeTimeFormat.addLocale(...)`.\r\n * @param  {object} localeData\r\n */\n\nexport function addLocaleData(localeData) {\n  if (!localeData) {\n    throw new Error('No locale data passed');\n  } // This locale data is stored in a global variable\n  // and later used when calling `.format(time)`.\n\n\n  localesData[localeData.locale] = localeData;\n  lowercaseLocaleLookup[localeData.locale.toLowerCase()] = localeData.locale;\n}\n/**\r\n * Returns a locale for which locale data has been added\r\n * via `RelativeTimeFormat.addLocale(...)`.\r\n * @param  {string} locale\r\n * @return {string} [locale]\r\n */\n\nexport function resolveLocale(locale) {\n  if (localesData[locale]) {\n    return locale;\n  }\n\n  if (lowercaseLocaleLookup[locale.toLowerCase()]) {\n    return lowercaseLocaleLookup[locale.toLowerCase()];\n  }\n}","map":{"version":3,"sources":["../source/LocaleDataStore.js"],"names":["defaultLocale","localesData","lowercaseLocaleLookup","localeData","locale"],"mappings":"AAAA;AACA;AACA,IAAIA,aAAa,GAAjB,IAAA,C,CAEA;AACA;;AACA,IAAMC,WAAW,GAAjB,EAAA,C,CAEA;AACA;;AACA,IAAMC,qBAAqB,GAA3B,EAAA;AAEA,OAAO,SAAA,gBAAA,GAA4B;AACjC,SAAA,aAAA;AACD;AAED,OAAO,SAAA,gBAAA,CAAA,MAAA,EAAkC;AACvCF,EAAAA,aAAa,GAAbA,MAAAA;AACD;AAED;;;;;AAIA,OAAO,SAAA,aAAA,CAAA,MAAA,EAA+B;AACrC,SAAOC,WAAW,CAAlB,MAAkB,CAAlB;AACA;AAED;;;;;;AAKA,OAAO,SAAA,aAAA,CAAA,UAAA,EAAmC;AACxC,MAAI,CAAJ,UAAA,EAAiB;AACf,UAAM,IAAA,KAAA,CAAN,uBAAM,CAAN;AAFsC,GAAA,CAIxC;AACA;;;AACAA,EAAAA,WAAW,CAACE,UAAU,CAAtBF,MAAW,CAAXA,GAAAA,UAAAA;AACAC,EAAAA,qBAAqB,CAACC,UAAU,CAAVA,MAAAA,CAAtBD,WAAsBC,EAAD,CAArBD,GAAyDC,UAAU,CAAnED,MAAAA;AACD;AAED;;;;;;;AAMA,OAAO,SAAA,aAAA,CAAA,MAAA,EAA+B;AACrC,MAAID,WAAW,CAAf,MAAe,CAAf,EAAyB;AACxB,WAAA,MAAA;AACA;;AACD,MAAIC,qBAAqB,CAACE,MAAM,CAAhC,WAA0BA,EAAD,CAAzB,EAAiD;AAChD,WAAOF,qBAAqB,CAACE,MAAM,CAAnC,WAA6BA,EAAD,CAA5B;AACA;AACD","sourcesContent":["// Fallback locale.\r\n// (when not a single one of the supplied \"preferred\" locales is available)\r\nlet defaultLocale = 'en'\r\n\r\n// For all locales added\r\n// their relative time formatter messages will be stored here.\r\nconst localesData = {}\r\n\r\n// According to the spec BCP 47 language tags are case-insensitive.\r\n// https://tools.ietf.org/html/rfc5646\r\nconst lowercaseLocaleLookup = {}\r\n\r\nexport function getDefaultLocale() {\r\n  return defaultLocale\r\n}\r\n\r\nexport function setDefaultLocale(locale) {\r\n  defaultLocale = locale\r\n}\r\n\r\n/**\r\n * Gets locale data previously added by `addLocaleData()`.\r\n * @return  {object} [localeData]\r\n */\r\nexport function getLocaleData(locale) {\r\n\treturn localesData[locale]\r\n}\r\n\r\n/**\r\n * Adds locale data.\r\n * Is called by `RelativeTimeFormat.addLocale(...)`.\r\n * @param  {object} localeData\r\n */\r\nexport function addLocaleData(localeData) {\r\n  if (!localeData) {\r\n    throw new Error('No locale data passed')\r\n  }\r\n  // This locale data is stored in a global variable\r\n  // and later used when calling `.format(time)`.\r\n  localesData[localeData.locale] = localeData\r\n  lowercaseLocaleLookup[localeData.locale.toLowerCase()] = localeData.locale\r\n}\r\n\r\n/**\r\n * Returns a locale for which locale data has been added\r\n * via `RelativeTimeFormat.addLocale(...)`.\r\n * @param  {string} locale\r\n * @return {string} [locale]\r\n */\r\nexport function resolveLocale(locale) {\r\n\tif (localesData[locale]) {\r\n\t\treturn locale\r\n\t}\r\n\tif (lowercaseLocaleLookup[locale.toLowerCase()]) {\r\n\t\treturn lowercaseLocaleLookup[locale.toLowerCase()]\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}