{"ast":null,"code":"import { day, getDate } from '../steps';\nimport { intlDateTimeFormatSupported } from '../locale'; // For compatibility with the old versions of this library.\n\nimport renameLegacyProperties from './renameLegacyProperties'; // Twitter-style relative date/time formatting.\n// (\"1m\", \"2h\", \"Mar 3\", \"Apr 4, 2012\").\n//\n// Seconds, minutes or hours are shown for shorter intervals,\n// and longer intervals are formatted using full date format.\n\nvar steps = [{\n  formatAs: 'second'\n}, {\n  formatAs: 'minute'\n}, {\n  formatAs: 'hour'\n}]; // A cache for `Intl.DateTimeFormat` formatters\n// for various locales (is a global variable).\n\nvar formatters = {}; // Starting from day intervals, output month and day.\n\nvar monthAndDay = {\n  minTime: function minTime(timestamp, _ref) {\n    var future = _ref.future,\n        getMinTimeForUnit = _ref.getMinTimeForUnit; // Returns `23.5 * 60 * 60` when `round` is \"round\",\n    // and `24 * 60 * 60` when `round` is \"floor\".\n\n    return getMinTimeForUnit('day');\n  },\n  format: function format(value, locale) {\n    /* istanbul ignore else */\n    if (!formatters[locale]) {\n      formatters[locale] = {};\n    }\n    /* istanbul ignore else */\n\n\n    if (!formatters[locale].dayMonth) {\n      // \"Apr 11\" (MMMd)\n      formatters[locale].dayMonth = new Intl.DateTimeFormat(locale, {\n        month: 'short',\n        day: 'numeric'\n      });\n    } // Output month and day.\n\n\n    return formatters[locale].dayMonth.format(getDate(value));\n  }\n}; // If the `date` happened/happens outside of current year,\n// then output day, month and year.\n// The interval should be such that the `date` lies outside of the current year.\n\nvar yearMonthAndDay = {\n  minTime: function minTime(timestamp, _ref2) {\n    var future = _ref2.future;\n\n    if (future) {\n      // January 1, 00:00, of the `date`'s year is right after\n      // the maximum `now` for formatting a future date:\n      // When `now` is before that date, the `date` is formatted as \"day/month/year\" (this step),\n      // When `now` is equal to or after that date, the `date` is formatted as \"day/month\" (another step).\n      // After that, it's hours, minutes, seconds, and after that it's no longer `future`.\n      // The date is right after the maximum `now` for formatting a future date,\n      // so subtract 1 millisecond from it.\n      var maxFittingNow = new Date(new Date(timestamp).getFullYear(), 0).getTime() - 1; // Return `minTime` (in seconds).\n\n      return (timestamp - maxFittingNow) / 1000;\n    } else {\n      // January 1, 00:00, of the year following the `date`'s year\n      // is the minimum `now` for formatting a past date:\n      // When `now` is before that date, the `date` is formatted as \"day/month\" (another step),\n      // When `now` is equal to or after that date, the `date` is formatted as \"day/month/year\" (this step).\n      // After that, it's hours, minutes, seconds, and after that it's no longer `future`.\n      var minFittingNow = new Date(new Date(timestamp).getFullYear() + 1, 0).getTime(); // Return `minTime` (in seconds).\n\n      return (minFittingNow - timestamp) / 1000;\n    }\n  },\n  format: function format(value, locale) {\n    /* istanbul ignore if */\n    if (!formatters[locale]) {\n      formatters[locale] = {};\n    }\n    /* istanbul ignore else */\n\n\n    if (!formatters[locale].dayMonthYear) {\n      // \"Apr 11, 2017\" (yMMMd)\n      formatters[locale].dayMonthYear = new Intl.DateTimeFormat(locale, {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    } // Output day, month and year.\n\n\n    return formatters[locale].dayMonthYear.format(getDate(value));\n  }\n}; // If `Intl.DateTimeFormat` is supported,\n// then longer time intervals will be formatted as dates.\n\n/* istanbul ignore else */\n\nif (intlDateTimeFormatSupported()) {\n  steps.push(monthAndDay, yearMonthAndDay);\n} // Otherwise, if `Intl.DateTimeFormat` is not supported,\n// which could be the case when using Internet Explorer,\n// then simply mimick \"round\" steps.\nelse {\n  steps.push({\n    formatAs: 'day'\n  }, {\n    formatAs: 'week'\n  }, {\n    formatAs: 'month'\n  }, {\n    formatAs: 'year'\n  });\n}\n\nexport default {\n  steps: steps,\n  labels: [// \"mini\" labels are only defined for a few languages.\n  'mini', // \"short-time\" labels are only defined for a few languages.\n  'short-time', // \"narrow\" and \"short\" labels are defined for all languages.\n  // \"narrow\" labels can sometimes be weird (like \"+5d.\"),\n  // but \"short\" labels have the \" ago\" part, so \"narrow\" seem\n  // more appropriate.\n  // \"short\" labels would have been more appropriate if they\n  // didn't have the \" ago\" part, hence the \"short-time\" above.\n  'narrow', // Since \"narrow\" labels are always present, \"short\" element\n  // of this array can be removed.\n  'short']\n};","map":{"version":3,"sources":["../../source/style/twitter.js"],"names":["steps","formatAs","formatters","monthAndDay","minTime","future","getMinTimeForUnit","format","Intl","month","day","getDate","yearMonthAndDay","maxFittingNow","timestamp","minFittingNow","year","intlDateTimeFormatSupported","labels"],"mappings":"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","sourcesContent":["import { day, getDate } from '../steps'\r\nimport { intlDateTimeFormatSupported } from '../locale'\r\n\r\n// For compatibility with the old versions of this library.\r\nimport renameLegacyProperties from './renameLegacyProperties'\r\n\r\n// Twitter-style relative date/time formatting.\r\n// (\"1m\", \"2h\", \"Mar 3\", \"Apr 4, 2012\").\r\n//\r\n// Seconds, minutes or hours are shown for shorter intervals,\r\n// and longer intervals are formatted using full date format.\r\n\r\nconst steps = [\r\n\t{\r\n\t\tformatAs: 'second'\r\n\t},\r\n\t{\r\n\t\tformatAs: 'minute'\r\n\t},\r\n\t{\r\n\t\tformatAs: 'hour'\r\n\t}\r\n]\r\n\r\n// A cache for `Intl.DateTimeFormat` formatters\r\n// for various locales (is a global variable).\r\nconst formatters = {}\r\n\r\n// Starting from day intervals, output month and day.\r\nconst monthAndDay = {\r\n\tminTime(timestamp, { future, getMinTimeForUnit }) {\r\n\t\t// Returns `23.5 * 60 * 60` when `round` is \"round\",\r\n\t\t// and `24 * 60 * 60` when `round` is \"floor\".\r\n\t\treturn getMinTimeForUnit('day')\r\n\t},\r\n\tformat(value, locale) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (!formatters[locale]) {\r\n\t\t\tformatters[locale] = {}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif (!formatters[locale].dayMonth) {\r\n\t\t\t// \"Apr 11\" (MMMd)\r\n\t\t\tformatters[locale].dayMonth = new Intl.DateTimeFormat(locale, {\r\n\t\t\t\tmonth: 'short',\r\n\t\t\t\tday: 'numeric'\r\n\t\t\t})\r\n\t\t}\r\n\t\t// Output month and day.\r\n\t\treturn formatters[locale].dayMonth.format(getDate(value))\r\n\t}\r\n}\r\n\r\n// If the `date` happened/happens outside of current year,\r\n// then output day, month and year.\r\n// The interval should be such that the `date` lies outside of the current year.\r\nconst yearMonthAndDay = {\r\n\tminTime(timestamp, { future }) {\r\n\t\tif (future) {\r\n\t\t\t// January 1, 00:00, of the `date`'s year is right after\r\n\t\t\t// the maximum `now` for formatting a future date:\r\n\t\t\t// When `now` is before that date, the `date` is formatted as \"day/month/year\" (this step),\r\n\t\t\t// When `now` is equal to or after that date, the `date` is formatted as \"day/month\" (another step).\r\n\t\t\t// After that, it's hours, minutes, seconds, and after that it's no longer `future`.\r\n\t\t\t// The date is right after the maximum `now` for formatting a future date,\r\n\t\t\t// so subtract 1 millisecond from it.\r\n\t\t\tconst maxFittingNow = new Date(new Date(timestamp).getFullYear(), 0).getTime() - 1\r\n\t\t\t// Return `minTime` (in seconds).\r\n\t\t\treturn (timestamp - maxFittingNow) / 1000\r\n\t\t} else {\r\n\t\t\t// January 1, 00:00, of the year following the `date`'s year\r\n\t\t\t// is the minimum `now` for formatting a past date:\r\n\t\t\t// When `now` is before that date, the `date` is formatted as \"day/month\" (another step),\r\n\t\t\t// When `now` is equal to or after that date, the `date` is formatted as \"day/month/year\" (this step).\r\n\t\t\t// After that, it's hours, minutes, seconds, and after that it's no longer `future`.\r\n\t\t\tconst minFittingNow = new Date(new Date(timestamp).getFullYear() + 1, 0).getTime()\r\n\t\t\t// Return `minTime` (in seconds).\r\n\t\t\treturn (minFittingNow - timestamp) / 1000\r\n\t\t}\r\n\t},\r\n\tformat(value, locale) {\r\n\t\t/* istanbul ignore if */\r\n\t\tif (!formatters[locale]) {\r\n\t\t\tformatters[locale] = {}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif (!formatters[locale].dayMonthYear) {\r\n\t\t\t// \"Apr 11, 2017\" (yMMMd)\r\n\t\t\tformatters[locale].dayMonthYear = new Intl.DateTimeFormat(locale, {\r\n\t\t\t\tyear: 'numeric',\r\n\t\t\t\tmonth: 'short',\r\n\t\t\t\tday: 'numeric'\r\n\t\t\t})\r\n\t\t}\r\n\t\t// Output day, month and year.\r\n\t\treturn formatters[locale].dayMonthYear.format(getDate(value))\r\n\t}\r\n}\r\n\r\n// If `Intl.DateTimeFormat` is supported,\r\n// then longer time intervals will be formatted as dates.\r\n/* istanbul ignore else */\r\nif (intlDateTimeFormatSupported()) {\r\n\tsteps.push(monthAndDay, yearMonthAndDay)\r\n}\r\n// Otherwise, if `Intl.DateTimeFormat` is not supported,\r\n// which could be the case when using Internet Explorer,\r\n// then simply mimick \"round\" steps.\r\nelse {\r\n\tsteps.push(\r\n\t\t{\r\n\t\t\tformatAs: 'day'\r\n\t\t},\r\n\t\t{\r\n\t\t\tformatAs: 'week'\r\n\t\t},\r\n\t\t{\r\n\t\t\tformatAs: 'month'\r\n\t\t},\r\n\t\t{\r\n\t\t\tformatAs: 'year'\r\n\t\t}\r\n\t)\r\n}\r\n\r\nexport default {\r\n\tsteps,\r\n\tlabels: [\r\n\t\t// \"mini\" labels are only defined for a few languages.\r\n\t\t'mini',\r\n\t\t// \"short-time\" labels are only defined for a few languages.\r\n\t\t'short-time',\r\n\t\t// \"narrow\" and \"short\" labels are defined for all languages.\r\n\t\t// \"narrow\" labels can sometimes be weird (like \"+5d.\"),\r\n\t\t// but \"short\" labels have the \" ago\" part, so \"narrow\" seem\r\n\t\t// more appropriate.\r\n\t\t// \"short\" labels would have been more appropriate if they\r\n\t\t// didn't have the \" ago\" part, hence the \"short-time\" above.\r\n\t\t'narrow',\r\n\t\t// Since \"narrow\" labels are always present, \"short\" element\r\n\t\t// of this array can be removed.\r\n\t\t'short'\r\n\t]\r\n}"]},"metadata":{},"sourceType":"module"}